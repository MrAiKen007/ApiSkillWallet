# Generated by Django 5.2 on 2025-04-24 20:18

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Endereço de email único para login', max_length=254, unique=True, verbose_name='email')),
                ('seed_phrase', models.CharField(help_text='24 palavras secretas para recuperação da carteira', max_length=288, validators=[django.core.validators.MinLengthValidator(128), django.core.validators.RegexValidator(message='Deve conter 24 palavras minúsculas separadas por espaços', regex='^[a-z]+( [a-z]+){23}$')], verbose_name='seed phrase')),
                ('public_key', models.CharField(db_index=True, max_length=256, unique=True, validators=[django.core.validators.MinLengthValidator(64), django.core.validators.RegexValidator(message='Formato hexadecimal inválido', regex='^[0-9a-fA-F]{64,256}$')], verbose_name='chave pública')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='criado em')),
                ('groups', models.ManyToManyField(blank=True, related_name='tonwallet_users', related_query_name='tonwallet_user', to='auth.group', verbose_name='grupos')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='tonwallet_users', related_query_name='tonwallet_user', to='auth.permission', verbose_name='permissões')),
            ],
            options={
                'verbose_name': 'usuário',
                'verbose_name_plural': 'usuários',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=9, max_digits=36, verbose_name='valor')),
                ('token', models.CharField(choices=[('TON', 'Toncoin'), ('JETTON', 'Jetton'), ('NFT', 'NFT')], max_length=10, verbose_name='token')),
                ('tx_hash', models.CharField(max_length=256, unique=True, verbose_name='hash da transação')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='data/hora')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('confirmed', 'Confirmada'), ('failed', 'Falhou')], default='pending', max_length=10, verbose_name='status')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_transactions', to=settings.AUTH_USER_MODEL, verbose_name='destinatário')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_transactions', to=settings.AUTH_USER_MODEL, verbose_name='remetente')),
            ],
            options={
                'verbose_name': 'transação',
                'verbose_name_plural': 'transações',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_type', models.CharField(choices=[('TON', 'Toncoin'), ('JETTON', 'Jetton'), ('NFT', 'NFT')], default='TON', max_length=10, verbose_name='tipo de token')),
                ('balance', models.DecimalField(decimal_places=9, default=0, max_digits=36, verbose_name='saldo')),
                ('contract_address', models.CharField(max_length=256, verbose_name='endereço do contrato')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallets', to=settings.AUTH_USER_MODEL, verbose_name='usuário')),
            ],
            options={
                'verbose_name': 'carteira',
                'verbose_name_plural': 'carteiras',
                'ordering': ['-token_type'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['public_key', 'email'], name='api_user_public__087c16_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['tx_hash'], name='api_transac_tx_hash_b44823_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['sender', 'receiver'], name='api_transac_sender__51f480_idx'),
        ),
    ]
